const express = require('express');
const morgan = require('morgan');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');
const tstRoute = require('./routers/tst');
const userRoutes = require('./routers/userRoutes');
const postRoutes = require('./routers/postRoutes');
const blockedUserRoutes = require('./routers/blockedUserRoutes');
const adminRoutes = require('./routers/adminRoutes');
const path = require('path');

dotenv.config();

const app = express();

// MongoDB Connection
const mongoURI = process.env.MONGO_URI || "your-default-mongo-uri";
mongoose.connect(mongoURI);

mongoose.connection.on('connected', () => {
  console.log('MongoDB connection established successfully!');
});

mongoose.connection.on('error', (err) => {
  console.error('MongoDB connection error:', err);
});

mongoose.connection.on('disconnected', () => {
  console.log('MongoDB connection disconnected');
});

// Middleware
app.use(morgan('dev'));
app.use(express.json()); // Replaces body-parser
app.use(express.urlencoded({ extended: false })); // Handles URL-encoded data
app.use(cors()); // Enables CORS with default settings
// Serve static files from the uploads directory
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Routes
app.use('/tst', tstRoute);
app.use('/users', userRoutes);
app.use('/posts', postRoutes);
app.use('/blocked-users', blockedUserRoutes);
app.use('/admin',adminRoutes);


// 404 Route Handler
app.use((req, res, next) => {
  const error = new Error("Route Not Found");
  error.status = 404;
  next(error);
});

// Global Error Handler
app.use((err, req, res, next) => {
  res.status(err.status || 500).json({
    error: {
      message: err.message,
    },
  });
});

module.exports = app; 












// const express = require('express');
// const morgan = require('morgan');
// const bodyPraser = require('body-parser');
// const mongoose = require('mongoose');


// const tstRoute = require('./routers/tst')

// const app = express();
// const mongoURI = "mongodb+srv://l226824:meowmeow@unify.7wsuw.mongodb.net/?retryWrites=true&w=majority&appName=UNIfy";

// // Connect to MongoDB
// mongoose.connect(mongoURI);

// // Check if MongoDB connection was successful or if there was an error
// mongoose.connection.on('connected', () => {
//   console.log('MongoDB connection established successfully!');
// });

// mongoose.connection.on('error', (err) => {
//   console.error('MongoDB connection error:', err);
// });

// mongoose.connection.on('disconnected', () => {
//   console.log('MongoDB connection disconnected');
// });
// // You need to secure your MongoDB Atlas cluster before you can use it. Set which users and IP addresses can access your cluster now. Read more 

// // Add a connection IP address
// // Your current IP address (39.62.215.34) has been added to enable local connectivity. Only an IP address you add to your Access List will be able to connect to your project's clusters. Add more later in 
// // Network Access
// // .
// // Create a database user
// // This first user will have atlasAdmin  permissions for this project.

// // We autogenerated a username and password. You can use this or create your own.

// // You'll need your database user's credentials in the next step. Copy the database user password.
// // Username
// // l226824
// // Password
// // meowmeow






// app.use(morgan('dev'));
// app.use(bodyPraser.urlencoded({extended:false}));
// app.use(bodyPraser.json());

// app.use((req,res,next)=>{
//     res.header("Access-Control-Allow-Origin","*");
//     res.header("Access-Control-Allow-Header","Origin,X-Requested-With, Content-Type,Accept,Authorization");

//     if(req.method === 'OPTIONS')
//     {
//         res.header("Access-Control-Allow-Methods",'PUT, POST, PATCH, DELETE, GET');
//         res.status(200).json({});
//     }
//     next();
// });

// app.use('/tst',tstRoute)

// app.use((req,res,next)=>{
//     const error = new Error("Route Not Found");
//     error.status = 404;
//     next(error);
// });
// app.use((err,req,res,next)=>{
//     res.status(err.status || 500).json({
//         error:{
//             message : err.message
//         }
//     })
// });

// module.exports = app;